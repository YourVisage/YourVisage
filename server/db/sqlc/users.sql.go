// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO 
    "users" (
        "FirstName",
        "LastName",
        "Email",
        "Password"
    )
VALUES
    (
        $1 :: VARCHAR(75),
        $2 :: VARCHAR(75),
        $3 :: VARCHAR(100),
        $4 :: VARCHAR(100)
    ) RETURNING "Id", "FirstName", "LastName", "Email", "Password", "CreatedAt"
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Id,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT
    "Id", "FirstName", "LastName", "Email", "Password", "CreatedAt"
FROM
    "users"
WHERE
    "Id" = $1 :: INT
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one

UPDATE
    "users"
SET
    "Password" = $1 :: VARCHAR(100)
WHERE 
    "Id" = $2 :: INT
    AND "Email" = $3 :: VARCHAR(100)
RETURNING "Id", "FirstName", "LastName", "Email", "Password", "CreatedAt"
`

type UpdateUserParams struct {
	Password string
	Id       int32
	Email    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Password, arg.Id, arg.Email)
	var i User
	err := row.Scan(
		&i.Id,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
